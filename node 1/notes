installing packages:
	> go to npmjs.com 			-> npm is Node Package Manager
	> lookup the package and open it
	> it'll have a commandline instruction for you to see
	> open commandline and typr it (for eg: for express package, it'll be 'npm install express') 
	> if it shows an error regarding package.json, type 'npm init'
	> go through the choices commands and type answer or skip it
	> after that, type the installation command again (sth like 'npm install express')
	> a new folder node_modules will appear with all the other dependent modules 
	>installation complete


Quick Summary
	A package is a file or directory that is described by a package.json. This can happen in a bunch of different ways!

	A module is any file or directory that can be loaded by Node.js' require(). Again, there are several configurations that allow this to happen.
	
		What is a package?
			A package is any of the following:

			a) A folder containing a program described by a package.json file.
			b) A gzipped tarball containing (a).
			c) A url that resolves to (b).
			d) A <name>@<version> that is published on the registry with (c).
			e) A <name>@<tag> that points to (d).
			f) A <name> that has a latest tag satisfying (e).
			g) A git url that, when cloned, results in (a).
			Noting all these package possibilities, it follows that even if you never publish your package to the public registry, you can still get a lot of benefits of using npm:

			If you just want to write a node program, and/or,
			If you also want to be able to easily install it elsewhere after packing it up into a tarball.

		What is a module?
			A module is anything that can be loaded with require() in a Node.js program. The following are all examples of things that can be loaded as modules:

			A folder with a package.json file containing a main field.
			A folder with an index.js file in it.
			A JavaScript file.
			Most npm packages are modules
			Generally, npm packages that are used in Node.js program are loaded with require, making them modules. However, there's no requirement that an npm package be a module!

			Some packages, e.g., cli packages, only contain an executable command-line interface and don't provide a main field for use in Node.js programs. These packages are not modules.

			Almost all npm packages (at least, those that are Node programs) contain many modules within them (because every file they load with require() is a module).

			In the context of a Node program, the module is also the thing that was loaded from a file.

https://docs.npmjs.com/getting-started/packages


??? basic - npm install involves a package, require(sth here) involves a module. Most npm packages are modules

Static Asset: app.use tells the server where all the other helper files are located. app.use(express.static(public)) tells the server all my accompanying files such as css adn javascript are located in public folder. 